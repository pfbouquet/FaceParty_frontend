/**
 * Fournit une connexion WebSocket Ã  toute l'application via socket.io.
 * Ce contexte permet d'accÃ©der au socket depuis n'importe quel composant. context = mÃ©canique pour partager des donnÃ©es dans tous les composants facilement
 * SocketContext englobe toute l'app dans app.js
 */

import { createContext, useEffect, useState } from "react";
import { io } from "socket.io-client";

export const SocketContext = createContext(null); // CrÃ©ation du contexte pour exposer le socket dans l'app
const EXPO_PUBLIC_BACKEND_URL = process.env.EXPO_PUBLIC_BACKEND_URL;

export const SocketProvider = ({ children }) => {
  const [socket, setSocket] = useState(null); // stocke l'instance de socket. instance = objet socket comme envoyer un Ã©vÃ¨nement ou encore Ã©couter un socket

  useEffect(() => {
    const newSocket = io(EXPO_PUBLIC_BACKEND_URL, {
      transports: ["websocket"],
    });

    console.log("url =>", EXPO_PUBLIC_BACKEND_URL);
    setSocket(newSocket);// Mise Ã  jour du state avec l'instance de socket

    // Log une fois que le socket est connectÃ©
    newSocket.on("connect", () => {
      console.log("âœ… Socket connected:", newSocket.id);
    });

    // Nettoyage Ã  la dÃ©sactivation du provider ou dÃ©montage du composant
    return () => {
      console.log("ðŸ›‘ Socket disconnected:", newSocket.id);
      newSocket.emit("disconnect"); // Envoie un event de dÃ©connexion
      newSocket.disconnect(); // Ferme la connexion socket
    };
  }, []);

  // Fournit l'instance du socket Ã  tous les composants enfants via le context
  return (
    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>
  );
};
